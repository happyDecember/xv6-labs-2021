diff --git a/kernel/defs.h b/kernel/defs.h
index 3564db4..93699ee 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -63,6 +63,9 @@ void            ramdiskrw(struct buf*);
 void*           kalloc(void);
 void            kfree(void *);
 void            kinit(void);
+//void            index_plusplus(uint64);  // add
+//void            index_subsub(uint64); // add
+int             cowfault(pagetable_t, uint64); // add
 
 // log.c
 void            initlog(int, struct superblock*);
@@ -170,6 +173,7 @@ uint64          walkaddr(pagetable_t, uint64);
 int             copyout(pagetable_t, uint64, char *, uint64);
 int             copyin(pagetable_t, char *, uint64, uint64);
 int             copyinstr(pagetable_t, char *, uint64, uint64);
+pte_t *         walk(pagetable_t pagetable, uint64 va, int alloc);
 
 // plic.c
 void            plicinit(void);
diff --git a/kernel/kalloc.c b/kernel/kalloc.c
index fa6a0ac..3329a5b 100644
--- a/kernel/kalloc.c
+++ b/kernel/kalloc.c
@@ -14,6 +14,9 @@ void freerange(void *pa_start, void *pa_end);
 extern char end[]; // first address after kernel.
                    // defined by kernel.ld.
 
+int page_index_count[PHYSTOP / PGSIZE];  // add
+struct spinlock ref_count_lock;
+
 struct run {
   struct run *next;
 };
@@ -35,8 +38,9 @@ freerange(void *pa_start, void *pa_end)
 {
   char *p;
   p = (char*)PGROUNDUP((uint64)pa_start);
-  for(; p + PGSIZE <= (char*)pa_end; p += PGSIZE)
+  for(; p + PGSIZE <= (char*)pa_end; p += PGSIZE){	  
     kfree(p);
+  }  
 }
 
 // Free the page of physical memory pointed at by v,
@@ -45,11 +49,21 @@ freerange(void *pa_start, void *pa_end)
 // initializing the allocator; see kinit above.)
 void
 kfree(void *pa)
-{
+{	  
+
   struct run *r;
 
   if(((uint64)pa % PGSIZE) != 0 || (char*)pa < end || (uint64)pa >= PHYSTOP)
     panic("kfree");
+  
+  acquire(&ref_count_lock);
+  page_index_count[(uint64)pa / PGSIZE]-=1;
+  int temp = page_index_count[(uint64)pa / PGSIZE];	  
+  release(&ref_count_lock);
+  if(temp > 0){
+    return;
+  }
+   // add
 
   // Fill with junk to catch dangling refs.
   memset(pa, 1, PGSIZE);
@@ -72,11 +86,55 @@ kalloc(void)
 
   acquire(&kmem.lock);
   r = kmem.freelist;
-  if(r)
+  if(r){
     kmem.freelist = r->next;
+    acquire(&ref_count_lock);
+    page_index_count[(uint64)r / PGSIZE] = 1;  // add
+    release(&ref_count_lock);
+  }  
   release(&kmem.lock);
 
   if(r)
     memset((char*)r, 5, PGSIZE); // fill with junk
   return (void*)r;
 }
+
+/*void
+index_plusplus(uint64 pa)
+{
+  acquire(&(kmem.lock));
+  page_index_count[pa / PGSIZE]++;
+  release(&(kmem.lock));
+}
+
+void
+index_subsub(uint64 pa)
+{
+  acquire(&(kmem.lock));
+  page_index_count[pa / PGSIZE]--;
+  release(&(kmem.lock));
+}*/  
+
+int
+cowfault(pagetable_t pagetable, uint64 va)
+{	
+  char *mem;
+  if(va >= MAXVA)
+    return -1; 
+  
+  pte_t* pte = walk(pagetable, va, 0);  // 获取地址对应页表项
+  
+  if(!pte || !(*pte & PTE_COW)|| !(*pte & PTE_U) || !(*pte & PTE_V))
+    return -1;  
+  if((mem = kalloc()) == 0)
+    return -1;	  
+  memmove((char*)mem, (char*)PTE2PA(*pte), PGSIZE);
+  kfree((void*)PTE2PA(*pte));
+  uint flags = PTE_FLAGS(*pte);
+  *pte = (PA2PTE((uint64)mem) | flags | PTE_W);
+  *pte &= (~PTE_COW);    
+  return 0;
+}
+
+
+
diff --git a/kernel/riscv.h b/kernel/riscv.h
index 1691faf..7a18de1 100644
--- a/kernel/riscv.h
+++ b/kernel/riscv.h
@@ -343,6 +343,7 @@ sfence_vma()
 #define PTE_W (1L << 2)
 #define PTE_X (1L << 3)
 #define PTE_U (1L << 4) // 1 -> user can access
+#define PTE_COW (1L << 8)  // add
 
 // shift a physical address to the right place for a PTE.
 #define PA2PTE(pa) ((((uint64)pa) >> 12) << 10)
diff --git a/kernel/trap.c b/kernel/trap.c
index a63249e..4e0d1b0 100644
--- a/kernel/trap.c
+++ b/kernel/trap.c
@@ -63,11 +63,27 @@ usertrap(void)
     // an interrupt will change sstatus &c registers,
     // so don't enable until done with those registers.
     intr_on();
-
+   
     syscall();
-  } else if((which_dev = devintr()) != 0){
+  } 
+  else if (r_scause() == 15) {
+       uint64 va = r_stval();
+       if (va >= p->sz)
+	 p->killed = 1;
+       int ret = cowfault(p->pagetable, va);
+       if (ret != 0)
+         p->killed = 1;
+       
+  }else if((which_dev = devintr()) != 0){
     // ok
-  } else {
+  } /*else if(r_scause() == 15){
+	   struct proc* p = myproc();    // add		   
+           if(cowfault(p->pagetable, r_stval()) < 0){
+             p->killed = 1;      
+	     exit(-1);  // add	    
+           }
+  }  */
+  else {
     printf("usertrap(): unexpected scause %p pid=%d\n", r_scause(), p->pid);
     printf("            sepc=%p stval=%p\n", r_sepc(), r_stval());
     p->killed = 1;
diff --git a/kernel/vm.c b/kernel/vm.c
index d5a12a0..3bb3cca 100644
--- a/kernel/vm.c
+++ b/kernel/vm.c
@@ -5,6 +5,8 @@
 #include "riscv.h"
 #include "defs.h"
 #include "fs.h"
+#include "spinlock.h"
+#include "proc.h"
 
 /*
  * the kernel's page table.
@@ -15,6 +17,8 @@ extern char etext[];  // kernel.ld sets this to end of kernel code.
 
 extern char trampoline[]; // trampoline.S
 
+extern int page_index_count[PHYSTOP/PGSIZE];
+extern struct spinlock ref_count_lock;
 // Make a direct-map page table for the kernel.
 pagetable_t
 kvmmake(void)
@@ -301,25 +305,34 @@ int
 uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)
 {
   pte_t *pte;
-  uint64 pa, i;
+  uint64 pa;
+  uint64 i;
   uint flags;
-  char *mem;
+ // char *mem;
 
   for(i = 0; i < sz; i += PGSIZE){
-    if((pte = walk(old, i, 0)) == 0)
+    if((pte = walk(old, i, 0)) == 0)   
       panic("uvmcopy: pte should exist");
+    
     if((*pte & PTE_V) == 0)
       panic("uvmcopy: page not present");
+    if (*pte & PTE_W) {
+    *pte &= ~PTE_W;  
+    *pte |= PTE_COW;
+    }
     pa = PTE2PA(*pte);
+
+    acquire(&ref_count_lock);
+    page_index_count[pa/PGSIZE] += 1; 
+    release(&ref_count_lock);
+
     flags = PTE_FLAGS(*pte);
-    if((mem = kalloc()) == 0)
-      goto err;
-    memmove(mem, (char*)pa, PGSIZE);
-    if(mappages(new, i, PGSIZE, (uint64)mem, flags) != 0){
-      kfree(mem);
-      goto err;
-    }
-  }
+    if(mappages(new, i, PGSIZE,(uint64)pa, flags) != 0) // add
+      goto err;   // add
+
+   // index_plusplus(pa);  // add
+  }  
+  // add    
   return 0;
 
  err:
@@ -350,12 +363,39 @@ copyout(pagetable_t pagetable, uint64 dstva, char *src, uint64 len)
 
   while(len > 0){
     va0 = PGROUNDDOWN(dstva);
+   
+   /* if(va0 >= MAXVA)  // 虚拟地址越界
+      return -1; 	    
+    pte_t* pte = walk(pagetable, va0, 0);  // 找到页表项
+    if (pte == 0 || (*pte & PTE_V) == 0 || (*pte & PTE_U) == 0)
+      return -1;
+    if((*pte & PTE_COW) && cowfault(pagetable, va0) < 0)  // 重新分配失败
+	return -1;*/    
     pa0 = walkaddr(pagetable, va0);
     if(pa0 == 0)
       return -1;
+    struct proc *p = myproc();
+    pte_t *pte = walk(pagetable, va0, 0);
+    if (*pte == 0)
+       p->killed = 1;
+    if ((va0 < p->sz) && (*pte & PTE_V) && (*pte & PTE_COW)){
+      char *mem;	    
+    if ((mem = kalloc()) == 0) {
+      p->killed = 1;
+    }
+    else{
+	memmove(mem, (char*)pa0, PGSIZE);
+        uint flags = PTE_FLAGS(*pte);
+        uvmunmap(pagetable, va0, 1, 1);
+        *pte = (PA2PTE(mem) | flags | PTE_W);
+        *pte &= ~PTE_COW;
+        pa0 = (uint64)mem;
+    }
+   }    
+
     n = PGSIZE - (dstva - va0);
     if(n > len)
-      n = len;
+      n = len;    
     memmove((void *)(pa0 + (dstva - va0)), src, n);
 
     len -= n;
