diff --git a/Makefile b/Makefile
index c926b7e..0a56ec4 100644
--- a/Makefile
+++ b/Makefile
@@ -193,9 +193,13 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
-
-
-
+        $U/_sleep\
+        $U/_pingpong\
+	$U/_primes\
+	$U/_find\
+	$U/_xargs\
+        $U/_trace\
+	$U/_sysinfotest\
 
 ifeq ($(LAB),$(filter $(LAB), pgtbl lock))
 UPROGS += \
diff --git a/kernel/defs.h b/kernel/defs.h
index 3564db4..5f9b47d 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -63,6 +63,7 @@ void            ramdiskrw(struct buf*);
 void*           kalloc(void);
 void            kfree(void *);
 void            kinit(void);
+uint64          get_free_memory_num(void);
 
 // log.c
 void            initlog(int, struct superblock*);
@@ -104,6 +105,7 @@ void            yield(void);
 int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
 int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
 void            procdump(void);
+int             get_process_num(void);
 
 // swtch.S
 void            swtch(struct context*, struct context*);
diff --git a/kernel/kalloc.c b/kernel/kalloc.c
index fa6a0ac..f09cd0a 100644
--- a/kernel/kalloc.c
+++ b/kernel/kalloc.c
@@ -80,3 +80,20 @@ kalloc(void)
     memset((char*)r, 5, PGSIZE); // fill with junk
   return (void*)r;
 }
+
+uint64
+get_free_memory_num(void)
+{
+  struct run *r;
+  acquire(&(kmem.lock));
+  r = kmem.freelist; // pointer to head
+  int count = 0;  // calculate pages
+  while(r){
+    count++;
+    r = r->next;
+  }  
+  release(&(kmem.lock));
+  return count * PGSIZE;
+}
+
+
diff --git a/kernel/proc.c b/kernel/proc.c
index 22e7ce4..808357f 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -114,6 +114,7 @@ allocproc(void)
       release(&p->lock);
     }
   }
+  p->trace_for_syscall = 0; 
   return 0;
 
 found:
@@ -292,6 +293,9 @@ fork(void)
   // copy saved user registers.
   *(np->trapframe) = *(p->trapframe);
 
+  // copy trace
+  np->trace_for_syscall = p->trace_for_syscall; 
+
   // Cause fork to return 0 in the child.
   np->trapframe->a0 = 0;
 
@@ -318,6 +322,22 @@ fork(void)
   return pid;
 }
 
+int
+get_process_num(void)
+{
+  struct proc *p = proc;
+  int count = 0;
+  while(p < proc + NPROC){	
+    acquire(&(p->lock));
+    if(p->state != UNUSED){
+        count++;
+    }
+    release(&(p->lock));
+    p++;
+    }
+    return count;
+}
+
 // Pass p's abandoned children to init.
 // Caller must hold wait_lock.
 void
diff --git a/kernel/proc.h b/kernel/proc.h
index f6ca8b7..f060147 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -105,4 +105,5 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  int trace_for_syscall;    
 };
diff --git a/kernel/syscall.c b/kernel/syscall.c
index c1b3670..720caa8 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -104,6 +104,8 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_wait(void);
 extern uint64 sys_write(void);
 extern uint64 sys_uptime(void);
+extern uint64 sys_trace(void);
+extern uint64 sys_sysinfo(void); 
 
 static uint64 (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
@@ -127,6 +129,34 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_trace]   sys_trace,
+[SYS_sysinfo] sys_sysinfo,
+};
+
+const char *syscall_names[] = {
+[SYS_fork]    "fork",
+[SYS_exit]    "exit",
+[SYS_wait]    "wait",
+[SYS_pipe]    "pipe",
+[SYS_read]    "read",
+[SYS_kill]    "kill",
+[SYS_exec]    "exec",
+[SYS_fstat]   "fstat",
+[SYS_chdir]   "chdir",
+[SYS_dup]     "dup",
+[SYS_getpid]  "getpid",
+[SYS_sbrk]    "sbrk",
+[SYS_sleep]   "sleep",
+[SYS_uptime]  "uptime",
+[SYS_open]    "open",
+[SYS_write]   "write",
+[SYS_mknod]   "mknod",
+[SYS_unlink]  "unlink",
+[SYS_link]    "link",
+[SYS_mkdir]   "mkdir",
+[SYS_close]   "close",
+[SYS_trace]   "trace",
+[SYS_sysinfo] "sysinfo",
 };
 
 void
@@ -138,6 +168,9 @@ syscall(void)
   num = p->trapframe->a7;
   if(num > 0 && num < NELEM(syscalls) && syscalls[num]) {
     p->trapframe->a0 = syscalls[num]();
+    if((p->trace_for_syscall >> num) & 1) {
+	printf("%d: syscall %s -> %d\n", p->pid, syscall_names[num],p->trapframe->a0);
+    }	
   } else {
     printf("%d %s: unknown sys call %d\n",
             p->pid, p->name, num);
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..c9025c8 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,6 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_trace  22
+#define SYS_sysinfo 23
+
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index e8bcda9..1585528 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -6,7 +6,7 @@
 #include "memlayout.h"
 #include "spinlock.h"
 #include "proc.h"
-
+#include "sysinfo.h"
 uint64
 sys_exit(void)
 {
@@ -95,3 +95,31 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+uint64
+sys_trace(void)
+{
+  int mask;
+  if (argint(0, &mask) < 0) {
+      return -1;
+  }
+  myproc()->trace_for_syscall = mask;
+  return 0;
+}
+
+uint64
+sys_sysinfo(void)
+{
+  uint64 addr;
+  argaddr(0, &addr);
+  struct sysinfo info;
+  info.freemem = get_free_memory_num();
+  info.nproc = get_process_num();
+
+  if(copyout(myproc() -> pagetable, addr, (char *)&info, sizeof(info)) < 0)
+      return -1;
+  return 0;
+}
+
+
+
diff --git a/user/find.c b/user/find.c
new file mode 100644
index 0000000..9d7e0d1
--- /dev/null
+++ b/user/find.c
@@ -0,0 +1,94 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+#include "kernel/fs.h"
+
+int match(const char *s, const char *pattern)
+{
+    for (int i = 0; i <= strlen(s) - strlen(pattern); i++)
+	for (int j = 0; j < strlen(pattern); j++)
+        {
+	    if (s[i + j] != pattern[j])
+                break;
+	    if (j == strlen(pattern) - 1)
+		return 1;
+     }
+    return 0;
+}
+
+void find(char *current_pos, char *target)
+{
+    int fd;
+    char buf[512] = {}, *p;
+    struct stat st;
+    struct dirent de;
+
+    if ((fd = open(current_pos, 0)) < 0)
+    {
+	fprintf(2, "this position is wrong.");
+        exit(1);
+    }
+    if (fstat(fd, &st) < 0)
+    {
+        fprintf(2, "this position can not stat.");
+        close(fd);
+        exit(1);
+    }	
+
+    switch (st.type)
+    {
+    case T_FILE:
+        if (match(current_pos, target))
+	    printf("%s\n", current_pos);
+        break;
+    case T_DIR:
+        strcpy(buf, current_pos);
+        p = buf + strlen(buf);
+	*p++ = '/';
+	while (read(fd, &de, sizeof(de)) == sizeof(de)){
+	    if (de.inum == 0)
+	        continue;
+            strcpy(p, de.name); 
+            if (strcmp(p, "..") == 0 || strcmp(p, ".") == 0)
+	        continue;
+            find(buf, target);
+        }
+        break;
+    }
+    close(fd);
+}
+
+int main(int argc, char **argv)
+{
+    if (argc < 2){
+        printf("please give the current position and the target file name.");
+        exit(1);
+    }
+    find(argv[1], argv[2]);
+    return 0;
+}    
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+    	    
diff --git a/user/pingpong.c b/user/pingpong.c
new file mode 100644
index 0000000..daea66a
--- /dev/null
+++ b/user/pingpong.c
@@ -0,0 +1,40 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+int main(){
+
+    int p1[2], p2[2];
+    pipe(p1);  // from parent to child
+    pipe(p2);  // from child to parent 
+    char buf[64] = {};
+    if(fork() == 0){
+        if(read(p1[0], buf, 4) != 4){
+	    fprintf(2, "child read error\n");
+	    exit(1);
+	}
+        close(p1[0]);
+        fprintf(0, "%d: received ping\n", getpid());
+
+	if(write(p2[1], "pong", 4) != 4){
+	     fprintf(2, "child write error\n");
+             exit(1);
+        }
+        close(p2[1]);
+    }  
+    else{
+	if(write(p1[1], "ping", 4) != 4){
+	    fprintf(2, "parent write error\n");
+            exit(1);
+        }	
+        close(p1[1]);
+        if(read(p2[0], buf, 4) != 4){
+	    fprintf(2, "parent read error\n");
+            exit(1);
+        }	
+        fprintf(0, "%d: received pong\n", getpid());
+        close(p2[0]);
+    }	
+    exit(0);
+}
+
diff --git a/user/primes.c b/user/primes.c
new file mode 100644
index 0000000..bfaa7e5
--- /dev/null
+++ b/user/primes.c
@@ -0,0 +1,82 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+const int N = 35;
+
+void input(int p[2], int list[], int length){
+    for(int i = 0; i < length; i++)
+        if(write(p[1], (list + i), sizeof(list[i])) < sizeof(list[i])){
+            fprintf(2, "write error in pipe input.");
+            exit(1);
+        }
+    close(p[1]);
+    close(p[1]); 
+}
+
+int output(int p[2], int list[]){
+    close(p[1]);
+    int index = 0, front, len = read(p[0], &front, sizeof(len));
+    if(len == 0)
+	return 0;
+    if(len < sizeof(len)){
+	fprintf(2, "read error in pipe output.");
+        exit(1);
+    }
+    fprintf(0, "prime %d\n", front);
+    while((len = read(p[0], index + list, sizeof(len))) == sizeof(len)){
+	if(list[index] % front != 0)
+	    index++;
+    }
+    close(p[0]);
+    return index;
+}
+
+void process(int p[2]){
+    int num[N], length = output(p, num), next[2];
+    if(length == 0)
+	exit(0);
+    pipe(next);
+    input(next, num, length);
+    if(fork() == 0)
+	process(next);
+}
+
+int main(){
+    int p[2], num[N];
+    pipe(p);
+
+    if(fork() == 0){
+	process(p);
+	wait(0);
+	exit(0);
+    }	
+    else{
+	for(int i = 2, j = 0; i <= N; i++, j++){
+	    num[j] = i;
+        }
+        input(p, num, N - 1);
+    }
+    wait(0);
+    exit(0);
+}    
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
+
diff --git a/user/sleep.c b/user/sleep.c
new file mode 100644
index 0000000..8569d2f
--- /dev/null
+++ b/user/sleep.c
@@ -0,0 +1,16 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+int main(int argc, char *argv[])
+{
+    if (argc < 2)
+    {
+        fprintf(2, "please input time to sleep:");
+        exit(1);
+    }
+    int i = atoi(argv[1]);
+    sleep(i);
+    exit(0);
+}
+
diff --git a/user/user.h b/user/user.h
index b71ecda..9bb7cee 100644
--- a/user/user.h
+++ b/user/user.h
@@ -1,5 +1,6 @@
 struct stat;
 struct rtcdate;
+struct sysinfo;
 
 // system calls
 int fork(void);
@@ -23,7 +24,8 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
-
+int trace(int);
+int sysinfo(struct sysinfo *);
 // ulib.c
 int stat(const char*, struct stat*);
 char* strcpy(char*, const char*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..bc109fd 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,5 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("trace");
+entry("sysinfo");
diff --git a/user/xargs.c b/user/xargs.c
new file mode 100644
index 0000000..c3a65a2
--- /dev/null
+++ b/user/xargs.c
@@ -0,0 +1,121 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+#include "kernel/param.h"
+
+const int ARG_SIZE = 64;
+
+char *getWord()
+{
+    char buf;
+    char *ret = (char *)malloc(ARG_SIZE), *p = ret;
+    while (read(0, &buf, sizeof(char)) == sizeof(char)){
+	if (buf == ' ' || buf == '\n')
+	     break;
+        else
+	    *p++ = buf;
+    }
+    *p++ = '\0';
+    return ret;
+}
+
+
+char **getInstruction(int argc, char **argv, int mode)
+{
+    char **ret = (char **)malloc(MAXARG * sizeof(char *)), **p = ret + argc;
+    for (int i = 0; i < argc; i++){
+	ret[i] = (char *)malloc(ARG_SIZE);
+        strcpy(ret[i], argv[i]);
+    }
+    int i = 0;
+    while (1){
+	 p[i++] = getWord();
+         if (strlen(p[i - 1]) == 0 || mode == i || argc + i == MAXARG)
+	     break;
+    }
+    p[i] = (char *)malloc(sizeof(char));
+    p[i] = "";
+    return ret;
+}
+
+int getInstructionLength(char **list)
+{
+    char **p = list;
+    while (strlen(*p++) > 0);
+    return p - list - 1;
+
+}
+	
+void freeInstruction(int length, char **list)
+{
+    for (int i = 0; i < length; i++)
+        free(list[i]);
+    free(list);
+}
+
+void printInstruction(char **list)
+{
+    char **p = list;
+    while (strlen(*p) > 0){
+	fprintf(2, *p++);
+        fprintf(2, " ");
+    }
+    fprintf(2, "\n");
+}
+
+int main(int argc, char *argv[])
+{
+    if (argc < 2)
+    {
+        fprintf(2, "please input essential args.");
+        exit(1);
+    }
+
+    int flag = 1, mode, dx;
+    if (argc < 3 || strcmp(argv[1], "-n") != 0){
+	dx = 1;
+        mode = MAXARG;
+    }
+    else
+    {
+	dx = 3;
+        mode = atoi(argv[2]);	
+    }
+
+    for (int i = dx; i < argc; i++)
+	argv[i - dx] = argv[i];
+    argc -= dx; 
+
+    while (flag){
+	char **list = getInstruction(argc, argv, mode);
+        int length = getInstructionLength(list);
+        if (length != argc){
+	    if (fork() == 0)
+	    {
+	        exec(list[0], list);
+                exit(0);
+            }	
+            else
+	    {
+	        wait(0);
+            }
+        }	
+        else
+            flag = 0;
+        freeInstruction(length, list);
+    }
+    return 0;
+}    
+
+
+
+
+
+
+
+
+
+
+
+
+	
