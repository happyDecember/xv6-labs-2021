diff --git a/notxv6/barrier.c b/notxv6/barrier.c
index 12793e8..83fd5bc 100644
--- a/notxv6/barrier.c
+++ b/notxv6/barrier.c
@@ -30,7 +30,15 @@ barrier()
   // Block until all threads have called barrier() and
   // then increment bstate.round.
   //
-  
+  pthread_mutex_lock(&(bstate.barrier_mutex));  // add
+  if(++bstate.nthread < nthread)
+    pthread_cond_wait(&(bstate.barrier_cond), &(bstate.barrier_mutex));
+  else{
+    bstate.round++;  
+    bstate.nthread = 0;
+    pthread_cond_broadcast(&(bstate.barrier_cond));
+  }
+  pthread_mutex_unlock(&(bstate.barrier_mutex));  // add
 }
 
 static void *
diff --git a/notxv6/ph.c b/notxv6/ph.c
index 82afe76..d7e07cb 100644
--- a/notxv6/ph.c
+++ b/notxv6/ph.c
@@ -16,7 +16,7 @@ struct entry {
 struct entry *table[NBUCKET];
 int keys[NKEYS];
 int nthread = 1;
-
+pthread_mutex_t locks[NBUCKET];  // add
 
 double
 now()
@@ -40,7 +40,7 @@ static
 void put(int key, int value)
 {
   int i = key % NBUCKET;
-
+  pthread_mutex_lock(&locks[i]);  // add:lock
   // is the key already present?
   struct entry *e = 0;
   for (e = table[i]; e != 0; e = e->next) {
@@ -54,7 +54,7 @@ void put(int key, int value)
     // the new is new.
     insert(key, value, &table[i], table[i]);
   }
-
+  pthread_mutex_unlock(&locks[i]);  // add:unlock
 }
 
 static struct entry*
@@ -105,7 +105,8 @@ main(int argc, char *argv[])
   void *value;
   double t1, t0;
 
-
+  for(int i = 0; i < NBUCKET; i++)  // add: 互斥锁初始化
+	  pthread_mutex_init(&locks[i], NULL);  // add
   if (argc < 2) {
     fprintf(stderr, "Usage: %s nthreads\n", argv[0]);
     exit(-1);
diff --git a/user/uthread.c b/user/uthread.c
index 06349f5..e0a63ed 100644
--- a/user/uthread.c
+++ b/user/uthread.c
@@ -10,10 +10,31 @@
 #define STACK_SIZE  8192
 #define MAX_THREAD  4
 
+struct ucontext {
+  uint64 ra;
+  uint64 sp;
+ // callee-saved
+  uint64 s0;
+  uint64 s1;
+  uint64 s2;
+  uint64 s3;
+  uint64 s4;
+  uint64 s5;
+  uint64 s6;
+  uint64 s7;
+  uint64 s8;
+  uint64 s9;
+  uint64 s10;
+  uint64 s11;
+};
+
+
+
 
 struct thread {
   char       stack[STACK_SIZE]; /* the thread's stack */
   int        state;             /* FREE, RUNNING, RUNNABLE */
+  struct ucontext context;      // add
 };
 struct thread all_thread[MAX_THREAD];
 struct thread *current_thread;
@@ -62,6 +83,7 @@ thread_schedule(void)
      * Invoke thread_switch to switch from t to next_thread:
      * thread_switch(??, ??);
      */
+    thread_switch((uint64)&t->context, (uint64)&current_thread->context);  // add
   } else
     next_thread = 0;
 }
@@ -76,6 +98,8 @@ thread_create(void (*func)())
   }
   t->state = RUNNABLE;
   // YOUR CODE HERE
+  t->context.sp = (uint64)(t->stack) + STACK_SIZE;
+  t->context.ra = (uint64)func;
 }
 
 void 
diff --git a/user/uthread_switch.S b/user/uthread_switch.S
index 5defb12..e351b2d 100644
--- a/user/uthread_switch.S
+++ b/user/uthread_switch.S
@@ -2,10 +2,40 @@
 
 	/*
          * save the old thread's registers,
+         * void swtch(struct context *old, struct context *new);
          * restore the new thread's registers.
          */
 
 	.globl thread_switch
 thread_switch:
 	/* YOUR CODE HERE */
+	sd ra, 0(a0)
+        sd sp, 8(a0)
+        sd s0, 16(a0)
+        sd s1, 24(a0)
+        sd s2, 32(a0)
+        sd s3, 40(a0)
+        sd s4, 48(a0)
+        sd s5, 56(a0)
+        sd s6, 64(a0)
+        sd s7, 72(a0)
+        sd s8, 80(a0)
+        sd s9, 88(a0)
+        sd s10, 96(a0)
+        sd s11, 104(a0)
+
+        ld ra, 0(a1)
+        ld sp, 8(a1)
+        ld s0, 16(a1)
+        ld s1, 24(a1)
+        ld s2, 32(a1)
+        ld s3, 40(a1)
+        ld s4, 48(a1)
+        ld s5, 56(a1)
+        ld s6, 64(a1)
+        ld s7, 72(a1)
+        ld s8, 80(a1)
+        ld s9, 88(a1)
+        ld s10, 96(a1)
+        ld s11, 104(a1)
 	ret    /* return to ra */
