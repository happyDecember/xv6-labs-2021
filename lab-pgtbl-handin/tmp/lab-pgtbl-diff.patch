diff --git a/kernel/defs.h b/kernel/defs.h
index 3564db4..f53d8ad 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -170,6 +170,8 @@ uint64          walkaddr(pagetable_t, uint64);
 int             copyout(pagetable_t, uint64, char *, uint64);
 int             copyin(pagetable_t, char *, uint64, uint64);
 int             copyinstr(pagetable_t, char *, uint64, uint64);
+void            vmprint(pagetable_t pagetable);
+pte_t*          walk(pagetable_t pagetable, uint64 va, int alloc);
 
 // plic.c
 void            plicinit(void);
diff --git a/kernel/exec.c b/kernel/exec.c
index d62d29d..7669136 100644
--- a/kernel/exec.c
+++ b/kernel/exec.c
@@ -116,6 +116,9 @@ exec(char *path, char **argv)
   p->trapframe->sp = sp; // initial stack pointer
   proc_freepagetable(oldpagetable, oldsz);
 
+  if(p->pid==1) 
+    vmprint(p->pagetable);
+
   return argc; // this ends up in a0, the first argument to main(argc, argv)
 
  bad:
diff --git a/kernel/proc.c b/kernel/proc.c
index 22e7ce4..5f64450 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -127,6 +127,13 @@ found:
     return 0;
   }
 
+  // allocate a page for usyacall
+  if ((p->uscall = (struct usyscall *)kalloc()) == 0){
+    freeproc(p);
+    release(&p->lock);
+    return 0;
+  }
+
   // An empty user page table.
   p->pagetable = proc_pagetable(p);
   if(p->pagetable == 0){
@@ -140,7 +147,7 @@ found:
   memset(&p->context, 0, sizeof(p->context));
   p->context.ra = (uint64)forkret;
   p->context.sp = p->kstack + PGSIZE;
-
+  p->uscall->pid = p->pid;
   return p;
 }
 
@@ -153,6 +160,9 @@ freeproc(struct proc *p)
   if(p->trapframe)
     kfree((void*)p->trapframe);
   p->trapframe = 0;
+  if (p->uscall)
+      kfree((void *)p->uscall);
+  p->uscall = 0;  
   if(p->pagetable)
     proc_freepagetable(p->pagetable, p->sz);
   p->pagetable = 0;
@@ -196,6 +206,13 @@ proc_pagetable(struct proc *p)
     return 0;
   }
 
+  if (mappages(pagetable, USYSCALL, PGSIZE,
+			  (uint64)(p->uscall), PTE_R | PTE_U) < 0){
+    uvmunmap(pagetable, TRAMPOLINE, 1, 0);
+    uvmunmap(pagetable, TRAPFRAME, 1, 0);
+    return 0;
+  }    
+
   return pagetable;
 }
 
@@ -206,6 +223,7 @@ proc_freepagetable(pagetable_t pagetable, uint64 sz)
 {
   uvmunmap(pagetable, TRAMPOLINE, 1, 0);
   uvmunmap(pagetable, TRAPFRAME, 1, 0);
+  uvmunmap(pagetable, USYSCALL, 1, 0);
   uvmfree(pagetable, sz);
 }
 
diff --git a/kernel/proc.h b/kernel/proc.h
index f6ca8b7..6a784db 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -105,4 +105,5 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  struct usyscall *uscall;
 };
diff --git a/kernel/riscv.h b/kernel/riscv.h
index 1691faf..20ef0b4 100644
--- a/kernel/riscv.h
+++ b/kernel/riscv.h
@@ -343,6 +343,8 @@ sfence_vma()
 #define PTE_W (1L << 2)
 #define PTE_X (1L << 3)
 #define PTE_U (1L << 4) // 1 -> user can access
+#define PTE_A (1L << 6) // have been accessed
+
 
 // shift a physical address to the right place for a PTE.
 #define PA2PTE(pa) ((((uint64)pa) >> 12) << 10)
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 3bd0007..29c427b 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -7,6 +7,7 @@
 #include "spinlock.h"
 #include "proc.h"
 
+
 uint64
 sys_exit(void)
 {
@@ -81,6 +82,24 @@ int
 sys_pgaccess(void)
 {
   // lab pgtbl: your code here.
+  uint64 address, mask_address;
+  argaddr(0, &address);
+  argaddr(2, &mask_address);
+  int len;
+  argint(1, &len);
+  if(len > 32)
+    return -1;
+  struct proc* proc = myproc();
+  uint32 mask = 0;
+  for(int i = 0; i < len; i++){
+    pte_t* pte = walk(proc->pagetable, address + i * PGSIZE, 0);
+    if(*pte & PTE_A){
+	mask |= 1 << i;  // 将当前虚拟地址对应的位设置为1
+        *pte &= ~PTE_A;  // 重置当前页表项的页面访问位
+    }
+  } 
+  if(copyout(proc->pagetable, mask_address, (char*)&mask, 4) < 0)
+    return -1;	  
   return 0;
 }
 #endif
diff --git a/kernel/vm.c b/kernel/vm.c
index d5a12a0..5e57d98 100644
--- a/kernel/vm.c
+++ b/kernel/vm.c
@@ -432,3 +432,25 @@ copyinstr(pagetable_t pagetable, char *dst, uint64 srcva, uint64 max)
     return -1;
   }
 }
+
+void vmprint(pagetable_t pagetable)
+{
+  static int num = 0;
+  if(num == 0)
+      printf("page table %p\n", pagetable);
+  for(int i = 0; i < PGSIZE / sizeof(pagetable_t); i++){
+      pte_t pte = pagetable[i];
+      if(pte & PTE_V){      
+        for(int j = 0; j <= num; j++)
+	  printf("..");
+        pagetable_t child = (pagetable_t)PTE2PA(pte);
+        printf("%d: pte %p pa %p\n", i, pte, child);
+        if (num != 2){
+          ++num;
+          vmprint(child);
+          --num;
+        }
+      }
+   }
+}  
+
