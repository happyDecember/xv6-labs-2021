diff --git a/Makefile b/Makefile
index 7a7e380..53b69b2 100644
--- a/Makefile
+++ b/Makefile
@@ -188,7 +188,7 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
-
+        $U/_alarmtest\
 
 
 
diff --git a/kernel/defs.h b/kernel/defs.h
index 3564db4..d1a3283 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -80,6 +80,7 @@ int             pipewrite(struct pipe*, uint64, int);
 void            printf(char*, ...);
 void            panic(char*) __attribute__((noreturn));
 void            printfinit(void);
+void            backtrace(void);  // add
 
 // proc.c
 int             cpuid(void);
diff --git a/kernel/printf.c b/kernel/printf.c
index e1347de..717c587 100644
--- a/kernel/printf.c
+++ b/kernel/printf.c
@@ -132,3 +132,16 @@ printfinit(void)
   initlock(&pr.lock, "pr");
   pr.locking = 1;
 }
+
+void
+backtrace()
+{
+  uint64 p = r_fp();  // 获取当前栈指针
+  while(p != PGROUNDUP(p)){
+    printf("%p\n", *(uint64*)(p-8));
+    p = *(uint64*)(p-16);
+  }
+}
+
+
+
diff --git a/kernel/proc.c b/kernel/proc.c
index 22e7ce4..cf18a16 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -140,6 +140,9 @@ found:
   memset(&p->context, 0, sizeof(p->context));
   p->context.ra = (uint64)forkret;
   p->context.sp = p->kstack + PGSIZE;
+  p->interval = 0;
+  p->is_return = 1;
+  p->handler = 0;
 
   return p;
 }
@@ -164,6 +167,11 @@ freeproc(struct proc *p)
   p->killed = 0;
   p->xstate = 0;
   p->state = UNUSED;
+  p->handler = 0;
+  p->interval = 0;
+  p->is_return = 0;
+
+  
 }
 
 // Create a user page table for a given process,
diff --git a/kernel/proc.h b/kernel/proc.h
index f6ca8b7..59066d5 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -105,4 +105,10 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  int interval;                // 表示每隔多少个 ticks 的 CPU 时间，内核会调用一次 handler 函数
+  uint64 handler;              // 函数指针，表示用户程序中的处理函数
+  struct trapframe save;       // 保存现场
+  int passed_ticks;            // 记录中断前的ticks
+  int is_return;               // 判断该进程是否返回，防止重复调用
+
 };
diff --git a/kernel/riscv.h b/kernel/riscv.h
index 1691faf..ebeff74 100644
--- a/kernel/riscv.h
+++ b/kernel/riscv.h
@@ -331,7 +331,13 @@ sfence_vma()
   asm volatile("sfence.vma zero, zero");
 }
 
-
+static inline uint64
+r_fp()
+{
+  uint64 x;
+  asm volatile("mv %0, s0" : "=r" (x) );
+  return x;
+}
 #define PGSIZE 4096 // bytes per page
 #define PGSHIFT 12  // bits of offset within a page
 
diff --git a/kernel/syscall.c b/kernel/syscall.c
index c1b3670..44c5f71 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -104,6 +104,8 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_wait(void);
 extern uint64 sys_write(void);
 extern uint64 sys_uptime(void);
+extern uint64 sys_sigalarm(void);  // add
+extern uint64 sys_sigreturn(void);  // add
 
 static uint64 (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
@@ -127,6 +129,9 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_sigalarm] sys_sigalarm,  // add
+[SYS_sigreturn] sys_sigreturn,  // add
+
 };
 
 void
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..0458b86 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,6 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_sigalarm 22  // add
+#define SYS_sigreturn 23  // add
+
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index e8bcda9..5987aa7 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -58,6 +58,7 @@ sys_sleep(void)
   int n;
   uint ticks0;
 
+  backtrace();  // add
   if(argint(0, &n) < 0)
     return -1;
   acquire(&tickslock);
@@ -95,3 +96,28 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+uint64
+sys_sigalarm(void)
+{
+  int interval;
+  uint64 handler;
+  argint(0, &interval);
+  argaddr(1, &handler);
+  struct proc *p = myproc();
+  p->interval = interval;
+  p->handler = (uint64)handler;
+  return 0;
+}
+
+uint64
+sys_sigreturn(void)
+{
+  struct proc *p = myproc();
+  p->is_return = 1; 
+  *p->trapframe = p->save;  
+  return p->trapframe->a0;
+}
+
+
+
diff --git a/kernel/trap.c b/kernel/trap.c
index a63249e..a114e0d 100644
--- a/kernel/trap.c
+++ b/kernel/trap.c
@@ -77,9 +77,17 @@ usertrap(void)
     exit(-1);
 
   // give up the CPU if this is a timer interrupt.
-  if(which_dev == 2)
+  if(which_dev == 2){
+    if (p->interval && p->is_return){	  
+      if (++p->passed_ticks == p->interval){
+	p->save = *p->trapframe;
+        p->trapframe->epc = p->handler;	
+	p->passed_ticks = 0;
+	p->is_return = 0;
+      }
+    }
     yield();
-
+  }
   usertrapret();
 }
 
diff --git a/user/call.c b/user/call.c
index f725dcb..a1fe9c7 100644
--- a/user/call.c
+++ b/user/call.c
@@ -13,5 +13,6 @@ int f(int x) {
 
 void main(void) {
   printf("%d %d\n", f(8)+1, 13);
+  printf("x=%d y=%d", 3);
   exit(0);
 }
diff --git a/user/user.h b/user/user.h
index b71ecda..b2e281c 100644
--- a/user/user.h
+++ b/user/user.h
@@ -23,6 +23,9 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int sigalarm(int interval, void (*handler)());  // add
+int sigreturn(void);  // add
+
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..fa548b0 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,5 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("sigalarm");
+entry("sigreturn");
